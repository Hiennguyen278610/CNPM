@startuml
class User {
    -loginId: string
    -password: string
    -email: string
    +GetUserDetails(userID): User
}

class Customer extends User {
    -wishlist: List<Product>
}

class Administrator extends User {
    +AddProduct(): void
    +EditProduct(): void
}

class Guest

class Product {
    -productID: int
    -productName: string
    -description: string
    -price: decimal
    -quantity: int
    -image: image
    -category: Category
    -brand: Brand
    -seller: Seller
    -rating: decimal
    +GetImage(productID): image
    +GetPrice(productID): decimal
}

class ShoppingCart {
    -productList: List<Product>
    +GetCartItems(customerID): List<Product>
}

enum OrderStatus {
    Ordered,
    Processing,
    Confirmed,
    Shipped
}

enum Payment {
    Paypal,
    Creditcard
}

class Order extends PaymentClass {
    -orderId: bigint
    -orderDate: datetime
    -shipped_Date: datetime
    -ship_to: Address
    -total: decimal
    -productList: List<Product>
    +GetOrderDetails(orderId): Order
    -status: OrderStatus
    -payment: Payment
}

abstract class PaymentClass {
    +CapturePayment(): void
    +ProcessPayment(): void
}

class UserAccount {
    -id: string
    -address: Address[]
    -phone: Phone[]
    -email: string
    -orders: Order[]
    +GetCustomer2Address(customerId): Address
}

class Address {
    -HouseNo: string
    -RoadL: string
    -City: string
    -State: string
}

enum CustomerStatus {
    Active,
    Blocked
}

class Seller {
    -sellerId: int
    -name: string
    -rating: decimal
    +GetSellerDetails(sellerId): Seller
}

class Category {
    -categoryId: int
    -categoryName: string
}

class Brand {
    -brandId: int
    -brandName: string
}

class Phone {
    -phoneNumber: string
    -type: string
}
User <|-- Customer
User <|-- Administrator

Customer o-- ShoppingCart : has
Order o-- Product : includes

UserAccount *-- Address : has-a
Customer *-- Address : lives at

Product --> Category : belongs to
Product --> Brand : of
Product --> Seller : sold by
Order --> Address : ships to

Order ..> OrderStatus : depends on
Order ..> Payment : uses
Customer ..> CustomerStatus
Administrator ..> Product : manages

@enduml